#include <data/ByteSet.h>
#include <data/tryout.h>
#include <data/trie.h>

#include <iostream>
#include <fstream>
#include <nlohmann/json.hpp>

using json = nlohmann::json;  

int main(int argc, char *argv[])
{
    // Block 10593417:
    //  Transactions Root Hash:
    //      0xab41f886be23cd786d8a69a72b0f988ea72e0b2e03970d0798f5e03763a442cc
    //  Transactions:
    //      (80, f8ab81a5852e90edd00083012bc294a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd280b844a9059cbb0000000000000000000000008bda8b9823b8490e8cf220dc7b91d97da1c54e250000000000000000000000000000000000000000000000056bc75e2d6310000026a06c89b57113cf7da8aed7911310e03d49be5e40de0bd73af4c9c54726c478691ba056223f039fab98d47c71f84190cf285ce8fc7d9181d6769387e5efd0a970e2e9)
    //      (01, f8ab81a6852e90edd00083012bc294a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd280b844a9059cbb0000000000000000000000008bda8b9823b8490e8cf220dc7b91d97da1c54e250000000000000000000000000000000000000000000000056bc75e2d6310000026a0d77c66153a661ecc986611dffda129e14528435ed3fd244c3afb0d434e9fd1c1a05ab202908bf6cbc9f57c595e6ef3229bce80a15cdf67487873e57cc7f5ad7c8a)
    //      (02, f86d8229f185199c82cc008252089488e9a2d38e66057e18545ce03b3ae9ce4fc360538702ce7de1537c008025a096e7a1d9683b205f697b4073a3e2f0d0ad42e708f03e899c61ed6a894a7f916aa05da238fbb96d41a4b5ec0338c86cfcb627d0aa8e556f21528e62f31c32f7e672)
    //      (03, f86f826b2585199c82cc0083015f9094e955ede0a3dbf651e2891356ecd0509c1edb8d9c8801051fdc4efdc0008025a02190f26e70a82d7f66354a13cda79b6af1aa808db768a787aeb348d425d7d0b3a06a82bd0518bc9b69dc551e20d772a1b06222edfc5d39b6973e4f4dc46ed8b196)

    Trie t;
    t.add( ByteSet(0x80),
           ByteSet("f8ab81a5852e90edd00083012bc294a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd280b844a9059cbb0000000000000000000000008bda8b9823b8490e8cf220dc7b91d97da1c54e250000000000000000000000000000000000000000000000056bc75e2d6310000026a06c89b57113cf7da8aed7911310e03d49be5e40de0bd73af4c9c54726c478691ba056223f039fab98d47c71f84190cf285ce8fc7d9181d6769387e5efd0a970e2e9"));
    t.add(ByteSet(0x01), 
           ByteSet("f8ab81a6852e90edd00083012bc294a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd280b844a9059cbb0000000000000000000000008bda8b9823b8490e8cf220dc7b91d97da1c54e250000000000000000000000000000000000000000000000056bc75e2d6310000026a0d77c66153a661ecc986611dffda129e14528435ed3fd244c3afb0d434e9fd1c1a05ab202908bf6cbc9f57c595e6ef3229bce80a15cdf67487873e57cc7f5ad7c8a"));
    t.add(ByteSet(0x02), 
           ByteSet("f86d8229f185199c82cc008252089488e9a2d38e66057e18545ce03b3ae9ce4fc360538702ce7de1537c008025a096e7a1d9683b205f697b4073a3e2f0d0ad42e708f03e899c61ed6a894a7f916aa05da238fbb96d41a4b5ec0338c86cfcb627d0aa8e556f21528e62f31c32f7e672"));
    t.add(ByteSet(0x03), 
           ByteSet("f86f826b2585199c82cc0083015f9094e955ede0a3dbf651e2891356ecd0509c1edb8d9c8801051fdc4efdc0008025a02190f26e70a82d7f66354a13cda79b6af1aa808db768a787aeb348d425d7d0b3a06a82bd0518bc9b69dc551e20d772a1b06222edfc5d39b6973e4f4dc46ed8b196"));


    ByteSet block_rlp("0xf90d6ff9027ea0eb4b643299f51e767da83ad61757c5584966104ab32fe169789ef1defcb6c7a6a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479471b981b8aeade9af6363ab9a2b8dc9b70bf3c8c6a0943215790c92378cd37c2e4fa936dcfcb91fb1bc69066f2676f881196f1b6abfa031e0b4bef6829874bd76e7085c74fbe99c680d64a19b526ed5a11dd148c17e07a014c4cdee073c1ebcd0bb0baaefa26cbe22c38c8e7eb8e7f8b12ca382f430e0ebb901000000400000000040100000000000000081084000000300000000800000018000001080000000010000020000000080008000000000000100020802000800000040010014000000400020001c0000040001000000200100000000110000000000000400000240024004080100001808000000000000400000000400100100000000402020004800000000200400120000000000000000280041880200420000000804000000000000800801002000200200000004000080420000100000008800000008060001000100036100008801000100040002001400000404001000200003000808000000000100120000900000800002000240000010000800040000008083159183840392a220832a78078468ee6da499657269676f6e2d332e332e302d6465762d6465306437396639a0efc5e03c6d17898dbf0d67677cb27250b2fa13aaee404328280df82b844dcaf2880000000000000000843efa9114a073f92d4d10cc413ed2c6aa1b6e0756416b050aba3ccde4bfdfe8aae6ea5bc0298080a06fc227593814c2b7b2904c7b27e2a03d8da67eb59afaafa50ad2ae42d9c68395a0e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855f908b7b902da02f902d683088bb08289718406ebfd198482e1a259830ed9369491cb447bafc6e0ea0f4fe056f5a9b1f14bb06e5d80b9026496051d56000000000000000000000000328d6c70cd1ca8e45598aedcbe3683af02bb309f00000000000000000000000000000000000000000000000000000000001591816a4dbd1b17e9fab83c4fe7d176edbdd6f5071fe221a4d55d7678661d566072ef88ec12be3b9ec1735673db639becd4216b5b13482ad486af47fe15d78769926500000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002402ea2a60f8719ed0df1b24e8c6211e9baf8fa89ebac54027052cc7f9fb846e66a2b717dd287fe95288a096ab65379549295446dc08a7d4bf6dda9813e8ade66c701c18d1171bf542420bbe786ece560a4f80f982fbb7de983d272db821d28058807a87eb688dfd8652447324b24448d36aa54f7dc47f46aee044818d2e14e54b4059c69f44df7b67a7b5a18b679ed3301921d712c5ed71db739c4aa12611a1b3f2f86ff2d2799db489e6556353217baa277ad0377515c5a69c9585700c09ad58d1e52cd4d70471c9089417b3cf151b8f9866d3b1bb7ad074f78c02764de3658f90c15e1858d23395b7f2e68697a8945ede6c7e35fd9dd3ae8905d6f33187e5cbf00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c616369647261696e3632343300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c080a0af0d79ddd8d4bee4248fe756426f4b76fca523cc2736c5c71a25d0129c424f23a0360f0a588183a88d121103fb6d3f2943325bdbdbd5f90a490f49a64fae237c8bb902fa02f902f683088bb08209138406ebfd198482e1a259830f0ec79491cb447bafc6e0ea0f4fe056f5a9b1f14bb06e5d80b9028496051d56000000000000000000000000a81b7f5d3da9b70b79abb7274f8e73ba9e6a31400000000000000000000000000000000000000000000000000000000000159181a24c8c2907ba8eef67b6db5264f70dea187a3b3dad03f8aba580368f9869b5e888ec12be3b9ec1735673db639becd4216b5b13482ad486af47fe15d78769926500000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000260255e9238bb3b01ae7234e3a560b9d16f32e7e6b564e303acefff1c99ce73d94606dca2d13dcdb29054601a4de0466cf6bed874de99520e40dda645fe1d2d5b182759321c91272b28b3e0e561b9a3ba2ac00ed677a105b025c89e14f0e699462629caf77ede65188f93ec0926e5d54d3abddf273777dd67d2a5a89d46598dbc1b2c1bcb9a4a767979e12db8795be121b752c6fa08518cc8fbade88dd47d8e64ce25f0983d40a7848a2f4cbc3a81b130e7f3a399fab49a51ee5efa0bf3219733f009b53a79a07d134a92dd004333620c7b7dc7ed3496e2f78d0eb9a253160a79a10585f94441367ef209d15c35e4766bf224b1db027f4962a55395931e35508f8900000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003e5768616c65416c6572745f3078643864613662663236393634616639643765656439653033653533343135643337616139363034355f323530303055534400000000000000000000000000000000000000000000000000000000000000000000c080a044ff66f7f34c0a77f76550d0767e6f2a2e6793e87c1810ee185b01ee191db06da00910e18cb842b1ec38ef857b6294acce57024abe4bbf9c30955c6cd440bb2b3cb902da02f902d683088bb0824b5e8406ebfd198482e1a259830e6f2e9491cb447bafc6e0ea0f4fe056f5a9b1f14bb06e5d80b9026496051d56000000000000000000000000ebdb5b0cc1c1c182c3f7869d3214c4baabb6d6fc00000000000000000000000000000000000000000000000000000000001591814d2791b3920916e5bdcdf04db337e84db7815fa9f1f97b1ad032f408548cd34b88ec12be3b9ec1735673db639becd4216b5b13482ad486af47fe15d78769926500000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002401aef946ee8cb0bbff108053e7fb06cb7a88c5a146349abd67d41a24a4a70be731ca21f3a8b39f5ea461753c5b7071befa2ec5486d7d6e789fc0bd6696a60ee2916af0a60312a763425a0a728e8324bf50f45ed5f5388716526fb0f6263ca9d22266a39f38903f223b0b4a6cdad9f29d57c37c7102bb05a1f10c9ac299e902dad1bfd628d978d32625c349336d590f4ba37674c89557d5e46969852777c8cae762a09aff5ec04d8a23bb784cbc2e3e4947fb6813bb67e4ca0a165edfb5109d5582af2c6302ab8993336e95e71dc287178130fb360091d78dc7868bfd6da443fc323e98bd64478a8bdd2428453131f48d9a4d34eb7f8c7e5da43538ae049e9297900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b6c616479303037626573740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c001a0ff11b1e25885ba05e29062f9bf81d8ebc8c5b88f3c29f0b51d01975da8ed17a1a007abd312c7b34bc576e029258b01ebcdf643a18e06236f170f5c3173fcaf6dcfc0f90230e28401570daf830fe6d094e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083316822e28401570db0830fe6d194e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083312568e28401570db1830fe6d294e5061fe5b4d0bd260f1ff80fa919e339f1f5c3308331624ce28401570db2830fe6d394e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083316152e28401570db3830fe6d494e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083314f52e28401570db4830fe6d594e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083317456e28401570db5830fe6d694e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083313935e28401570db6830fe6d794e5061fe5b4d0bd260f1ff80fa919e339f1f5c3308331665ae28401570db7830fe6d894e5061fe5b4d0bd260f1ff80fa919e339f1f5c330833139a4e28401570db8830fe6d994e5061fe5b4d0bd260f1ff80fa919e339f1f5c3308330dd89e28401570db9830fe6da94e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083313ba2e28401570dba830fe6db94e5061fe5b4d0bd260f1ff80fa919e339f1f5c3308331716be28401570dbb830fe6dc94e5061fe5b4d0bd260f1ff80fa919e339f1f5c330833177bce28401570dbc830fe6dd94e5061fe5b4d0bd260f1ff80fa919e339f1f5c3308331442be28401570dbd830fe6de94e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083316c9ce28401570dbe830fe6df94e5061fe5b4d0bd260f1ff80fa919e339f1f5c33083317656");
    //ByteSet<> block_rlp("0xC381AA02");
    
    Block b(block_rlp);
    cout << hex << b.getHeader()->getParentHash()->asString() << endl;
    //cout << hex << block_rlp << endl;
    //cout << hex << b.getTransactions()->getTransaction(0)->getNonce()->asString() << endl;
    //cout << hex << b.getTransactions()->getTransaction(1)->getNonce()->asString() << endl;
    //cout << hex << b.getTransactions()->getTransaction(2)->getNonce()->asString() << endl;
    //cout << hex << b.getWithdrawals()->getWithdrawal(15)->getAmount()->asString() << endl;
    //cout << hex << b.get<Header>()->get("parentHash")->getValue().asString() << endl;
    //cout << hex << b->asString() << endl;

    /*Block* b = new Block();
    Transactions* ts = new Transactions();
    Transaction* t = new Transaction();
    Field* f = new Field();

    t->push_back(f);
    ts->push_back(t);
    b->push_back(ts);
    Field* ff = dynamic_cast<Field*>((*(*((*b)[0]))[0])[0]);*/

    /*std::ifstream file("jsonfile.json");
    if (!file) {
        cout << "ERROR : File not Opened, Error while opening the file!" << endl;
        return 1;
    }
    json jsn;
    file >> jsn;
    file.close();
    cout<<"-|- Parsing done -|-"<<endl;
    string name = jsn["name"];
    long long mobile_no = jsn["mobile_no"];
    string university_or_college_name = jsn["university"];
    bool is_student = jsn["is_fresher"];
    cout << "--Display Old data:" << endl;
    
    cout<< "Name: " << name <<endl;
    cout<< "Mobile Number: " << mobile_no <<endl; 
    cout<< "University or College Name: "<< university_or_college_name<<endl;
    if (is_student) {
        cout<< "Is Fresher: Yes" << endl;
    } else {
        cout<< "Is Fresher: No" << endl;
    }
    cout<<"Skills: ";
    for(int i = 0; i < jsn["skills"].size(); i++) {
        cout << jsn["skills"][i] << " ";
    }
    
    jsn["name"] = "Asmita";
    jsn["mobile_no"] = 9876543210;
    jsn["university"] = "RSU";
    jsn["is_fresher"] = false;
    jsn["skills"].push_back("ML");
    if(!jsn["skills"].empty()){
        jsn["skills"].erase(jsn["skills"].begin());
    }
    else{
        cout<<"Person has not mention any skills"<<endl;}
    cout<<"\n--Display Updated data:"<<endl;
    cout<<"Name: "<<jsn["name"]<<endl;
    cout<<"Mobile Number: "<<jsn["mobile_no"]<<endl;
    cout<<"University or College Name: "<<jsn["university"]<<endl;
    if(jsn["is_fresher"]){
        cout<<"Is Fresher: Yes"<<endl;
    }else{
        cout<<"Is Fresher: No"<<endl;
    }
    cout<<"Skills: ";
    for(int i = 0; i < jsn["skills"].size(); i++) {
        cout << jsn["skills"][i] << " ";
    }
    std::ofstream outputFile("updatedjsondata.json");    
    outputFile << jsn.dump(4);
    cout<<"\nAll changes saved to 'updatedjsondata.json' file"<<endl;
    outputFile.close();*/
    return 0;
}